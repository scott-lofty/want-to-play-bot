import { __awaiter, __generator } from "tslib";
import { loadConfig } from "@aws-sdk/node-config-provider";
import { parseUrl } from "@aws-sdk/url-parser";
import { Endpoint as InstanceMetadataEndpoint } from "../config/Endpoint";
import { ENDPOINT_CONFIG_OPTIONS } from "../config/EndpointConfigOptions";
import { EndpointMode } from "../config/EndpointMode";
import { ENDPOINT_MODE_CONFIG_OPTIONS, } from "../config/EndpointModeConfigOptions";
/**
 * Returns the host to use for instance metadata service call.
 *
 * The host is read from endpoint which can be set either in
 * {@link ENV_ENDPOINT_NAME} environment variable or {@link CONFIG_ENDPOINT_NAME}
 * configuration property.
 *
 * If endpoint is not set, then endpoint mode is read either from
 * {@link ENV_ENDPOINT_MODE_NAME} environment variable or {@link CONFIG_ENDPOINT_MODE_NAME}
 * configuration property. If endpoint mode is not set, then default endpoint mode
 * {@link EndpointMode.IPv4} is used.
 *
 * If endpoint mode is set to {@link EndpointMode.IPv4}, then the host is {@link Endpoint.IPv4}.
 * If endpoint mode is set to {@link EndpointMode.IPv6}, then the host is {@link Endpoint.IPv6}.
 *
 * @returns Host to use for instance metadata service call.
 */
export var getInstanceMetadataEndpoint = function () { return __awaiter(void 0, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
    switch (_c.label) {
        case 0:
            _a = parseUrl;
            return [4 /*yield*/, getFromEndpointConfig()];
        case 1:
            _b = (_c.sent());
            if (_b) return [3 /*break*/, 3];
            return [4 /*yield*/, getFromEndpointModeConfig()];
        case 2:
            _b = (_c.sent());
            _c.label = 3;
        case 3: return [2 /*return*/, _a.apply(void 0, [_b])];
    }
}); }); };
var getFromEndpointConfig = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2 /*return*/, loadConfig(ENDPOINT_CONFIG_OPTIONS)()];
}); }); };
var getFromEndpointModeConfig = function () { return __awaiter(void 0, void 0, void 0, function () {
    var endpointMode;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)()];
            case 1:
                endpointMode = _a.sent();
                switch (endpointMode) {
                    case EndpointMode.IPv4:
                        return [2 /*return*/, InstanceMetadataEndpoint.IPv4];
                    case EndpointMode.IPv6:
                        return [2 /*return*/, InstanceMetadataEndpoint.IPv6];
                    default:
                        throw new Error("Unsupported endpoint mode: " + endpointMode + "." + (" Select from " + Object.values(EndpointMode)));
                }
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2dldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsUUFBUSxJQUFJLHdCQUF3QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUUsT0FBTyxFQUF3Qix1QkFBdUIsRUFBcUIsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUVMLDRCQUE0QixHQUU3QixNQUFNLHFDQUFxQyxDQUFDO0FBRTdDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQUc7OztZQUN6QyxLQUFBLFFBQVEsQ0FBQTtZQUFFLHFCQUFNLHFCQUFxQixFQUFFLEVBQUE7O1lBQTlCLEtBQUEsQ0FBQyxTQUE2QixDQUFDLENBQUE7b0JBQS9CLHdCQUErQjtZQUFLLHFCQUFNLHlCQUF5QixFQUFFLEVBQUE7O1lBQWxDLEtBQUEsQ0FBQyxTQUFpQyxDQUFDLENBQUE7O2dCQUEvRSxzQkFBQSxzQkFBZ0YsRUFBQTs7U0FBQSxDQUFDO0FBRW5GLElBQU0scUJBQXFCLEdBQUc7SUFBeUMsc0JBQUEsVUFBVSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBQTtTQUFBLENBQUM7QUFFN0csSUFBTSx5QkFBeUIsR0FBRzs7OztvQkFDWCxxQkFBTSxVQUFVLENBQUMsNEJBQTRCLENBQUMsRUFBRSxFQUFBOztnQkFBL0QsWUFBWSxHQUFHLFNBQWdEO2dCQUNyRSxRQUFRLFlBQVksRUFBRTtvQkFDcEIsS0FBSyxZQUFZLENBQUMsSUFBSTt3QkFDcEIsc0JBQU8sd0JBQXdCLENBQUMsSUFBSSxFQUFDO29CQUN2QyxLQUFLLFlBQVksQ0FBQyxJQUFJO3dCQUNwQixzQkFBTyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUM7b0JBQ3ZDO3dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQThCLFlBQVksTUFBRyxJQUFHLGtCQUFnQixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBRyxDQUFBLENBQUMsQ0FBQztpQkFDbEg7Ozs7S0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9hZENvbmZpZyB9IGZyb20gXCJAYXdzLXNkay9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgRW5kcG9pbnQgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSBcIkBhd3Mtc2RrL3VybC1wYXJzZXJcIjtcblxuaW1wb3J0IHsgRW5kcG9pbnQgYXMgSW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50IH0gZnJvbSBcIi4uL2NvbmZpZy9FbmRwb2ludFwiO1xuaW1wb3J0IHsgQ09ORklHX0VORFBPSU5UX05BTUUsIEVORFBPSU5UX0NPTkZJR19PUFRJT05TLCBFTlZfRU5EUE9JTlRfTkFNRSB9IGZyb20gXCIuLi9jb25maWcvRW5kcG9pbnRDb25maWdPcHRpb25zXCI7XG5pbXBvcnQgeyBFbmRwb2ludE1vZGUgfSBmcm9tIFwiLi4vY29uZmlnL0VuZHBvaW50TW9kZVwiO1xuaW1wb3J0IHtcbiAgQ09ORklHX0VORFBPSU5UX01PREVfTkFNRSxcbiAgRU5EUE9JTlRfTU9ERV9DT05GSUdfT1BUSU9OUyxcbiAgRU5WX0VORFBPSU5UX01PREVfTkFNRSxcbn0gZnJvbSBcIi4uL2NvbmZpZy9FbmRwb2ludE1vZGVDb25maWdPcHRpb25zXCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaG9zdCB0byB1c2UgZm9yIGluc3RhbmNlIG1ldGFkYXRhIHNlcnZpY2UgY2FsbC5cbiAqXG4gKiBUaGUgaG9zdCBpcyByZWFkIGZyb20gZW5kcG9pbnQgd2hpY2ggY2FuIGJlIHNldCBlaXRoZXIgaW5cbiAqIHtAbGluayBFTlZfRU5EUE9JTlRfTkFNRX0gZW52aXJvbm1lbnQgdmFyaWFibGUgb3Ige0BsaW5rIENPTkZJR19FTkRQT0lOVF9OQU1FfVxuICogY29uZmlndXJhdGlvbiBwcm9wZXJ0eS5cbiAqXG4gKiBJZiBlbmRwb2ludCBpcyBub3Qgc2V0LCB0aGVuIGVuZHBvaW50IG1vZGUgaXMgcmVhZCBlaXRoZXIgZnJvbVxuICoge0BsaW5rIEVOVl9FTkRQT0lOVF9NT0RFX05BTUV9IGVudmlyb25tZW50IHZhcmlhYmxlIG9yIHtAbGluayBDT05GSUdfRU5EUE9JTlRfTU9ERV9OQU1FfVxuICogY29uZmlndXJhdGlvbiBwcm9wZXJ0eS4gSWYgZW5kcG9pbnQgbW9kZSBpcyBub3Qgc2V0LCB0aGVuIGRlZmF1bHQgZW5kcG9pbnQgbW9kZVxuICoge0BsaW5rIEVuZHBvaW50TW9kZS5JUHY0fSBpcyB1c2VkLlxuICpcbiAqIElmIGVuZHBvaW50IG1vZGUgaXMgc2V0IHRvIHtAbGluayBFbmRwb2ludE1vZGUuSVB2NH0sIHRoZW4gdGhlIGhvc3QgaXMge0BsaW5rIEVuZHBvaW50LklQdjR9LlxuICogSWYgZW5kcG9pbnQgbW9kZSBpcyBzZXQgdG8ge0BsaW5rIEVuZHBvaW50TW9kZS5JUHY2fSwgdGhlbiB0aGUgaG9zdCBpcyB7QGxpbmsgRW5kcG9pbnQuSVB2Nn0uXG4gKlxuICogQHJldHVybnMgSG9zdCB0byB1c2UgZm9yIGluc3RhbmNlIG1ldGFkYXRhIHNlcnZpY2UgY2FsbC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludCA9IGFzeW5jICgpOiBQcm9taXNlPEVuZHBvaW50PiA9PlxuICBwYXJzZVVybCgoYXdhaXQgZ2V0RnJvbUVuZHBvaW50Q29uZmlnKCkpIHx8IChhd2FpdCBnZXRGcm9tRW5kcG9pbnRNb2RlQ29uZmlnKCkpKTtcblxuY29uc3QgZ2V0RnJvbUVuZHBvaW50Q29uZmlnID0gYXN5bmMgKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiA9PiBsb2FkQ29uZmlnKEVORFBPSU5UX0NPTkZJR19PUFRJT05TKSgpO1xuXG5jb25zdCBnZXRGcm9tRW5kcG9pbnRNb2RlQ29uZmlnID0gYXN5bmMgKCk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IGVuZHBvaW50TW9kZSA9IGF3YWl0IGxvYWRDb25maWcoRU5EUE9JTlRfTU9ERV9DT05GSUdfT1BUSU9OUykoKTtcbiAgc3dpdGNoIChlbmRwb2ludE1vZGUpIHtcbiAgICBjYXNlIEVuZHBvaW50TW9kZS5JUHY0OlxuICAgICAgcmV0dXJuIEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludC5JUHY0O1xuICAgIGNhc2UgRW5kcG9pbnRNb2RlLklQdjY6XG4gICAgICByZXR1cm4gSW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LklQdjY7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5kcG9pbnQgbW9kZTogJHtlbmRwb2ludE1vZGV9LmAgKyBgIFNlbGVjdCBmcm9tICR7T2JqZWN0LnZhbHVlcyhFbmRwb2ludE1vZGUpfWApO1xuICB9XG59O1xuIl19