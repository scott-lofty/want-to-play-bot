import { __assign } from "tslib";
import { EndpointCache } from "@aws-sdk/endpoint-cache";
export var resolveEndpointDiscoveryConfig = function (input, _a) {
    var _b;
    var endpointDiscoveryCommandCtor = _a.endpointDiscoveryCommandCtor;
    return (__assign(__assign({}, input), { endpointDiscoveryCommandCtor: endpointDiscoveryCommandCtor, endpointCache: new EndpointCache((_b = input.endpointCacheSize) !== null && _b !== void 0 ? _b : 1000), endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== undefined
            ? function () { return Promise.resolve(input.endpointDiscoveryEnabled); }
            : input.endpointDiscoveryEnabledProvider, isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== undefined }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZUVuZHBvaW50RGlzY292ZXJ5Q29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Jlc29sdmVFbmRwb2ludERpc2NvdmVyeUNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBNER4RCxNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRyxVQUM1QyxLQUE0RCxFQUM1RCxFQUFnRTs7UUFBOUQsNEJBQTRCLGtDQUFBO0lBQ1UsT0FBQSx1QkFDckMsS0FBSyxLQUNSLDRCQUE0Qiw4QkFBQSxFQUM1QixhQUFhLEVBQUUsSUFBSSxhQUFhLENBQUMsTUFBQSxLQUFLLENBQUMsaUJBQWlCLG1DQUFJLElBQUksQ0FBQyxFQUNqRSx3QkFBd0IsRUFDdEIsS0FBSyxDQUFDLHdCQUF3QixLQUFLLFNBQVM7WUFDMUMsQ0FBQyxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxFQUEvQyxDQUErQztZQUN2RCxDQUFDLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUM1QyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUMsd0JBQXdCLEtBQUssU0FBUyxJQUM5RSxDQUFBO0NBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuZHBvaW50Q2FjaGUgfSBmcm9tIFwiQGF3cy1zZGsvZW5kcG9pbnQtY2FjaGVcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxzLCBQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVuZHBvaW50RGlzY292ZXJ5SW5wdXRDb25maWcge31cblxuZXhwb3J0IGludGVyZmFjZSBQcmV2aW91c2x5UmVzb2x2ZWQge1xuICBpc0N1c3RvbUVuZHBvaW50OiBib29sZWFuO1xuICBjcmVkZW50aWFsczogUHJvdmlkZXI8Q3JlZGVudGlhbHM+O1xuICBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRQcm92aWRlcjogUHJvdmlkZXI8Ym9vbGVhbiB8IHVuZGVmaW5lZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5kcG9pbnREaXNjb3ZlcnlJbnB1dENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY2xpZW50IGNhY2hlIHN0b3JpbmcgZW5kcG9pbnRzIGZyb20gZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbnMuXG4gICAqIERlZmF1bHRzIHRvIDEwMDAuXG4gICAqL1xuICBlbmRwb2ludENhY2hlU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBjYWxsIG9wZXJhdGlvbnMgd2l0aCBlbmRwb2ludHMgZ2l2ZW4gYnkgc2VydmljZSBkeW5hbWljYWxseS5cbiAgICogU2V0dGluZyB0aGlzIGNvbmZpZyB0byBgdHJ1ZWAgd2lsbCBlbmFibGUgZW5kcG9pbnQgZGlzY292ZXJ5IGZvciBhbGwgYXBwbGljYWJsZSBvcGVyYXRpb25zLlxuICAgKiBTZXR0aW5nIGl0IHRvIGBmYWxzZWAgd2lsbCBleHBsaWNpdGx5IGRpc2FibGUgZW5kcG9pbnQgZGlzY292ZXJ5IGV2ZW4gdGhvdWdoIG9wZXJhdGlvbnMgdGhhdFxuICAgKiByZXF1aXJlIGVuZHBvaW50IGRpc2NvdmVyeSB3aWxsIHByZXN1bWFibHkgZmFpbC4gTGVhdmluZyBpdCB0byB1bmRlZmluZWQgbWVhbnMgU0RLIG9ubHkgZG9cbiAgICogZW5kcG9pbnQgZGlzY292ZXJ5IHdoZW4gaXQncyByZXF1aXJlZC4gRGVmYXVsdHMgdG8gYHVuZGVmaW5lZGAuXG4gICAqL1xuICBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xufVxuZXhwb3J0IGludGVyZmFjZSBFbmRwb2ludERpc2NvdmVyeVJlc29sdmVkQ29uZmlnIHtcbiAgLyoqXG4gICAqIExSVSBDYWNoZSB3aGljaCBzdG9yZXMgZW5kcG9pbnRzIGZyb20gZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbnMuXG4gICAqIFRoZSBzaXplIGlzIGVpdGhlciBwcm92aWRlZCBieSB7QGxpbmsgRW5kcG9pbnREaXNjb3ZlcnlJbnB1dENvbmZpZy5lbmRwb2ludENhY2hlU2l6ZX0uXG4gICAqL1xuICBlbmRwb2ludENhY2hlOiBFbmRwb2ludENhY2hlO1xuXG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIENvbW1hbmQgdXNlZCBmb3IgZGlzY292ZXJpbmcgZW5kcG9pbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3I6IG5ldyAoY29tYW5kQ29uZmlnOiBhbnkpID0+IGFueTtcblxuICAvKipcbiAgICogUmVzb2x2ZWQgdmFsdWUgZm9yIGlucHV0IGNvbmZpZyB7QGxpbmsgRW5kcG9pbnREaXNjb3ZlcnlJbnB1dENvbmZpZy5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWR9LlxuICAgKi9cbiAgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkOiBQcm92aWRlcjxib29sZWFuIHwgdW5kZWZpbmVkPjtcblxuICAvKipcbiAgICogU3RvcmVzIHdoZXRoZXIgZW5kcG9pbnQgZGlzY292ZXJ5IGNvbmZpZ3VyYXRpb24gaXMgc2V0IGxvY2FsbHkgYnkgcGFzc2luZ1xuICAgKiB7QGxpbmsgRW5kcG9pbnREaXNjb3ZlcnlJbnB1dENvbmZpZy5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWR9IGR1cmluZyBjbGllbnQgY3JlYXRpb24uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaXNDbGllbnRFbmRwb2ludERpc2NvdmVyeUVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5kcG9pbnREaXNjb3ZlcnlDb25maWdPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgQ29tbWFuZCB1c2VkIGZvciBkaXNjb3ZlcmluZyBlbmRwb2ludHMuXG4gICAqL1xuICBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yOiBuZXcgKGNvbWFuZENvbmZpZzogYW55KSA9PiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlRW5kcG9pbnREaXNjb3ZlcnlDb25maWcgPSA8VD4oXG4gIGlucHV0OiBUICYgUHJldmlvdXNseVJlc29sdmVkICYgRW5kcG9pbnREaXNjb3ZlcnlJbnB1dENvbmZpZyxcbiAgeyBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yIH06IEVuZHBvaW50RGlzY292ZXJ5Q29uZmlnT3B0aW9uc1xuKTogVCAmIEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcgPT4gKHtcbiAgLi4uaW5wdXQsXG4gIGVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3IsXG4gIGVuZHBvaW50Q2FjaGU6IG5ldyBFbmRwb2ludENhY2hlKGlucHV0LmVuZHBvaW50Q2FjaGVTaXplID8/IDEwMDApLFxuICBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQ6XG4gICAgaW5wdXQuZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkICE9PSB1bmRlZmluZWRcbiAgICAgID8gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGlucHV0LmVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZClcbiAgICAgIDogaW5wdXQuZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkUHJvdmlkZXIsXG4gIGlzQ2xpZW50RW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkOiBpbnB1dC5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWQgIT09IHVuZGVmaW5lZCxcbn0pO1xuIl19