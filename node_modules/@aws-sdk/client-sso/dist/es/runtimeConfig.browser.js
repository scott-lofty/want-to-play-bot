import { __assign } from "tslib";
import packageInfo from "./package.json";
import { Sha256 } from "@aws-crypto/sha256-browser";
import { FetchHttpHandler, streamCollector } from "@aws-sdk/fetch-http-handler";
import { invalidProvider } from "@aws-sdk/invalid-dependency";
import { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE } from "@aws-sdk/middleware-retry";
import { fromBase64, toBase64 } from "@aws-sdk/util-base64-browser";
import { calculateBodyLength } from "@aws-sdk/util-body-length-browser";
import { defaultUserAgent } from "@aws-sdk/util-user-agent-browser";
import { fromUtf8, toUtf8 } from "@aws-sdk/util-utf8-browser";
import { getRuntimeConfig as getSharedRuntimeConfig } from "./runtimeConfig.shared";
/**
 * @internal
 */
export var getRuntimeConfig = function (config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    if (config === void 0) { config = {}; }
    var clientSharedValues = getSharedRuntimeConfig(config);
    return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", base64Decoder: (_a = config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, defaultUserAgentProvider: (_d = config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }), maxAttempts: (_e = config.maxAttempts) !== null && _e !== void 0 ? _e : DEFAULT_MAX_ATTEMPTS, region: (_f = config.region) !== null && _f !== void 0 ? _f : invalidProvider("Region is missing"), requestHandler: (_g = config.requestHandler) !== null && _g !== void 0 ? _g : new FetchHttpHandler(), retryModeProvider: (_h = config.retryModeProvider) !== null && _h !== void 0 ? _h : (function () { return Promise.resolve(DEFAULT_RETRY_MODE); }), sha256: (_j = config.sha256) !== null && _j !== void 0 ? _j : Sha256, streamCollector: (_k = config.streamCollector) !== null && _k !== void 0 ? _k : streamCollector, utf8Decoder: (_l = config.utf8Decoder) !== null && _l !== void 0 ? _l : fromUtf8, utf8Encoder: (_m = config.utf8Encoder) !== null && _m !== void 0 ? _m : toUtf8 });
};
//# sourceMappingURL=runtimeConfig.browser.js.map